//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Flexiv
{
    [Serializable]
    public class ModeControllerMsg : Message
    {
        public const string k_RosMessageName = "flexiv_msgs/ModeController";
        public override string RosMessageName => k_RosMessageName;

        public const sbyte MODE_UNKNOWN = -1;
        public const sbyte MODE_IDLE = 0;
        public const sbyte MODE_RT_JOINT_TORQUE = 1;
        public const sbyte MODE_RT_JOINT_POSITION = 2;
        public const sbyte MODE_NRT_JOINT_POSITION = 3;
        public const sbyte MODE_NRT_PLAN_EXECUTION = 4;
        public const sbyte MODE_NRT_PRIMITIVE_EXECUTION = 5;
        public const sbyte MODE_RT_CARTESIAN_MOTION_FORCE_BASE = 6;
        public const sbyte MODE_RT_CARTESIAN_MOTION_FORCE_TCP = 7;
        public const sbyte MODE_NRT_CARTESIAN_MOTION_FORCE_BASE = 8;
        public const sbyte MODE_NRT_CARTESIAN_MOTION_FORCE_TCP = 9;
        public sbyte mode;
        public double[] positions;
        public double[] velocities;
        public double[] accelerations;
        public double[] torques;
        public double[] max_vel;
        public double[] max_acc;
        public sbyte plan_index;
        public bool gravity_comp;
        public bool soft_limits;
        public Std.StringMsg primitive_name;
        public Geometry.PoseMsg tcp_pose;

        public ModeControllerMsg()
        {
            this.mode = 0;
            this.positions = new double[7];
            this.velocities = new double[7];
            this.accelerations = new double[7];
            this.torques = new double[7];
            this.max_vel = new double[7];
            this.max_acc = new double[7];
            this.plan_index = 0;
            this.gravity_comp = false;
            this.soft_limits = false;
            this.primitive_name = new Std.StringMsg();
            this.tcp_pose = new Geometry.PoseMsg();
        }

        public ModeControllerMsg(sbyte mode, double[] positions, double[] velocities, double[] accelerations, double[] torques, double[] max_vel, double[] max_acc, sbyte plan_index, bool gravity_comp, bool soft_limits, Std.StringMsg primitive_name, Geometry.PoseMsg tcp_pose)
        {
            this.mode = mode;
            this.positions = positions;
            this.velocities = velocities;
            this.accelerations = accelerations;
            this.torques = torques;
            this.max_vel = max_vel;
            this.max_acc = max_acc;
            this.plan_index = plan_index;
            this.gravity_comp = gravity_comp;
            this.soft_limits = soft_limits;
            this.primitive_name = primitive_name;
            this.tcp_pose = tcp_pose;
        }

        public static ModeControllerMsg Deserialize(MessageDeserializer deserializer) => new ModeControllerMsg(deserializer);

        private ModeControllerMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.mode);
            deserializer.Read(out this.positions, sizeof(double), 7);
            deserializer.Read(out this.velocities, sizeof(double), 7);
            deserializer.Read(out this.accelerations, sizeof(double), 7);
            deserializer.Read(out this.torques, sizeof(double), 7);
            deserializer.Read(out this.max_vel, sizeof(double), 7);
            deserializer.Read(out this.max_acc, sizeof(double), 7);
            deserializer.Read(out this.plan_index);
            deserializer.Read(out this.gravity_comp);
            deserializer.Read(out this.soft_limits);
            this.primitive_name = Std.StringMsg.Deserialize(deserializer);
            this.tcp_pose = Geometry.PoseMsg.Deserialize(deserializer);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.mode);
            serializer.Write(this.positions);
            serializer.Write(this.velocities);
            serializer.Write(this.accelerations);
            serializer.Write(this.torques);
            serializer.Write(this.max_vel);
            serializer.Write(this.max_acc);
            serializer.Write(this.plan_index);
            serializer.Write(this.gravity_comp);
            serializer.Write(this.soft_limits);
            serializer.Write(this.primitive_name);
            serializer.Write(this.tcp_pose);
        }

        public override string ToString()
        {
            return "ModeControllerMsg: " +
            "\nmode: " + mode.ToString() +
            "\npositions: " + System.String.Join(", ", positions.ToList()) +
            "\nvelocities: " + System.String.Join(", ", velocities.ToList()) +
            "\naccelerations: " + System.String.Join(", ", accelerations.ToList()) +
            "\ntorques: " + System.String.Join(", ", torques.ToList()) +
            "\nmax_vel: " + System.String.Join(", ", max_vel.ToList()) +
            "\nmax_acc: " + System.String.Join(", ", max_acc.ToList()) +
            "\nplan_index: " + plan_index.ToString() +
            "\ngravity_comp: " + gravity_comp.ToString() +
            "\nsoft_limits: " + soft_limits.ToString() +
            "\nprimitive_name: " + primitive_name.ToString() +
            "\ntcp_pose: " + tcp_pose.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
